// Main script for module 'Pixel Perfect Collisions'

int ppc_maxx;
int ppc_maxy;
int ppc_minx;
int ppc_miny;

function PPC_GetObjectBounds(Object *a) 
{
    ppc_minx = a.X-GetViewportX();
    ppc_maxy = a.Y-GetViewportY();
    int graphic=a.Graphic; 
#ifdef AGS_SUPPORTS_IFVER
#ifnver 2.72
		// if object has view, cannot get frame/loop :(
    if (a.View) 
    {
      ViewFrame *frame=Game.GetViewFrame(a.View, a.Loop, a.Frame);
      graphic=frame.Graphic;
		}
#endif
#endif
#ifdef AGS_SUPPORTS_IFVER
    int awidth = Game.SpriteWidth[graphic];
    int aheight = Game.SpriteHeight[graphic];
#endif
#ifndef AGS_SUPPORTS_IFVER
    DynamicSprite *tmp=DynamicSprite.CreateFromExistingSprite(graphic);
    int awidth=tmp.Width;
    int aheight=tmp.Height;
    tmp.Delete();
#endif
    ppc_maxx = ppc_minx+awidth;
    ppc_miny = ppc_maxy-aheight;
}

function PPC_GetCharBounds(Character *a) 
{
    ppc_minx = a.x-GetViewportX();
    ppc_maxy = a.y-GetViewportY();
#ifdef AGS_SUPPORTS_IFVER
    ViewFrame *frame=Game.GetViewFrame(a.View, a.Loop, a.Frame);
    int graphic=frame.Graphic;
    int awidth = (Game.SpriteWidth[graphic]/2)+1;
    int aheight = Game.SpriteHeight[graphic];
#endif
#ifndef AGS_SUPPORTS_IFVER
    int graphic=GetGameParameter(GP_FRAMEIMAGE, a.View, a.Loop, a.Frame);
    DynamicSprite *tmp=DynamicSprite.CreateFromExistingSprite(graphic);
    int awidth=tmp.Width;
    int aheight=tmp.Height;
    tmp.Delete();
#endif
    ppc_miny = ppc_maxy-aheight;
		ppc_maxx = ppc_minx+awidth;
		ppc_minx = ppc_minx-awidth;
}

static function PPColliding::CWithC(Character *a, Character *b) 
{
  if (!AreThingsOverlapping(a.ID, b.ID)) return false;
  PPC_GetCharBounds(a);
  int minx=ppc_minx;
  int miny=ppc_miny;
  int maxx=ppc_maxx;
  int maxy=ppc_maxy;
  PPC_GetCharBounds(b);
  if (ppc_minx<minx) ppc_minx=minx;
  if (ppc_miny<miny) ppc_miny=miny;
  if (ppc_maxx>maxx) ppc_maxx=maxx;
  if (ppc_maxy>maxy) ppc_maxy=maxy;
#ifdef PPC_DEMO
  goDebug.Text=String.Format("minx %d maxx %d miny %d maxy %d", ppc_minx,  ppc_maxx,  ppc_miny,  ppc_maxy);
#endif
  while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty <= ppc_maxy) 
    {
      // Can't be sure which char is "in front", so we have to check both ways
			if (Character.GetAtScreenXY(ppc_minx, detecty)==a) 
      {
				a.Clickable=false;
				if (Character.GetAtScreenXY(ppc_minx, detecty)==b) 
        {
					a.Clickable = true;
					return true;
				}
        a.Clickable=true;
			} 
      else if (Character.GetAtScreenXY(ppc_minx, detecty)==b) 
      {
				b.Clickable=false;
				if (Character.GetAtScreenXY(ppc_minx, detecty)==a) 
        {
					b.Clickable = true;
					return true;
				}
        b.Clickable=true;
      }
			detecty++;
		}
  	ppc_minx++;  
	}
	return false;
} 

static function PPColliding::OWithC(Object *a, Character *b) 
{
  //if (!AreThingsOverlapping(a.ID+999, b.ID)) return false;
  PPC_GetObjectBounds(a);
  int minx=ppc_minx;
  int miny=ppc_miny;
  int maxx=ppc_maxx;
  int maxy=ppc_maxy;
  PPC_GetCharBounds(b);
  if (ppc_minx<minx) ppc_minx=minx;
  if (ppc_miny<miny) ppc_miny=miny;
  if (ppc_maxx>maxx) ppc_maxx=maxx;
  if (ppc_maxy>maxy) ppc_maxy=maxy;
	while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty <= ppc_maxy) 
    {
			if (Object.GetAtScreenXY(ppc_minx, detecty)==a) 
      {
				a.Clickable=false;
				if (Character.GetAtScreenXY(ppc_minx, detecty)==b) 
        {
					a.Clickable = true;
					return true;
				}
        a.Clickable=true;
			}
			detecty++;
		}
  	ppc_minx++;  
	}
  return false;
} 

static function PPColliding::CWithO(Character *a, Object *b) 
{
  //if (!AreThingsOverlapping(a.ID, b.ID+999)) return false;
  PPC_GetCharBounds(a);
  int minx=ppc_minx;
  int miny=ppc_miny;
  int maxx=ppc_maxx;
  int maxy=ppc_maxy;
  PPC_GetObjectBounds(b);
  if (ppc_minx<minx) ppc_minx=minx;
  if (ppc_miny<miny) ppc_miny=miny;
  if (ppc_maxx>maxx) ppc_maxx=maxx;
  if (ppc_maxy>maxy) ppc_maxy=maxy;
	while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty <= ppc_maxy) 
    {
			if (Character.GetAtScreenXY(ppc_minx, detecty)==a) 
      {
				a.Clickable=false;
				if (Object.GetAtScreenXY(ppc_minx, detecty)==b) 
        {
					a.Clickable = true;
					return true;
				}
        a.Clickable=true;
			}
			detecty++;
		}
  	ppc_minx++;  
	}
  return false;
} 

static function PPColliding::OWithO(Object *a, Object *b) 
{
  if (!a.IsCollidingWithObject(b)) return false;
  PPC_GetObjectBounds(a);
  int minx=ppc_minx;
  int miny=ppc_miny;
  int maxx=ppc_maxx;
  int maxy=ppc_maxy;
  PPC_GetObjectBounds(b);
  if (ppc_minx<minx) ppc_minx=minx;
  if (ppc_miny<miny) ppc_miny=miny;
  if (ppc_maxx>maxx) ppc_maxx=maxx;
  if (ppc_maxy>maxy) ppc_maxy=maxy;
	while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty <= ppc_maxy) 
    {
			if (Object.GetAtScreenXY(ppc_minx, detecty)==a) 
      {
				a.Clickable=false;
				if (Object.GetAtScreenXY(ppc_minx, detecty)==b) 
        {
					a.Clickable = true;
					return true;
				}
        a.Clickable=true;
			} 
      else if (Object.GetAtScreenXY(ppc_minx, detecty)==b) 
      {
				b.Clickable=false;
				if (Object.GetAtScreenXY(ppc_minx, detecty)==a) 
        {
					b.Clickable = true;
					return true;
				}
        b.Clickable=true;
      }
			detecty++;
		}
  	ppc_minx++;  
	}
  return false;
} 

static function PPColliding::CWithAnything(Character *a) 
{
  PPC_GetCharBounds(a);
	while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty <= ppc_maxy) 
    {
			if (Character.GetAtScreenXY(ppc_minx, detecty)==a) 
      {	
		    a.Clickable=false;
				int t=GetLocationType(ppc_minx, detecty);
				if (t >= eLocationCharacter) 
        {
					a.Clickable=true;
					return t; 		  
				}
				a.Clickable=true;
			}
			detecty++;
		}
  	ppc_minx++;  
	}
  return false;
}

static function PPColliding::OWithAnything(Object *a) 
{
  PPC_GetObjectBounds(a);
	while (ppc_minx <= ppc_maxx) 
  {		  
		int detecty = ppc_miny;
		while (detecty < ppc_maxy) 
    {
			if (Object.GetAtScreenXY(ppc_minx, detecty)==a) 
      {	
		    a.Clickable=false;
				int t=GetLocationType(ppc_minx, detecty);
				if (t >= eLocationCharacter) 
        {
					a.Clickable=true;
					return t; 		  
				}
				a.Clickable=true;
		  }
			detecty++;
		}
  	ppc_minx++;  
	}
  return false;
}

function PPCollidesWithC(this Character *, Character *b) 
{
  return PPColliding.CWithC(this, b);
}
function PPCollidesWithO(this Character *, Object *b) 
{
  return PPColliding.CWithO(this, b);
}
function PPCollidesWithC(this Object *, Character *b) 
{
  return PPColliding.OWithC(this, b);
}
function PPCollidesWithO(this Object *, Object *b) 
{
  return PPColliding.OWithO(this, b);
}
function PPCollidesWithAnything(this Character *) 
{
  return PPColliding.CWithAnything(this);
}
function PPCollidesWithAnything(this Object *) 
{
  return PPColliding.OWithAnything(this);
}

