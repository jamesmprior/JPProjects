// Main global script file

function repeatedly_execute()
{ 
  if (twoplayer == true && Frank.Room != 1 && (player.Room != 1) && player.Room != 4) // if twoplayer enabled, and NUMPAD or WASD directions hit, then move Frank in that direction
  {
    // WASD
    if (IsKeyPressed(eKeyA) || IsKeyPressed(eKey4) || IsKeyPressed(eKeyLeftArrow)){Frank.Walk(Frank.x - 10, Frank.y, eNoBlock, eWalkableAreas);} // Left
    if (IsKeyPressed(eKeyD) || IsKeyPressed(eKey6) || IsKeyPressed(eKeyRightArrow)){Frank.Walk(Frank.x + 10, Frank.y, eNoBlock, eWalkableAreas);} // Right
    if (IsKeyPressed(eKeyW) || IsKeyPressed(eKey8) || IsKeyPressed(eKeyUpArrow)){Frank.Walk(Frank.x, Frank.y - 10, eNoBlock, eWalkableAreas);} // Up
    if (IsKeyPressed(eKeyQ) || IsKeyPressed(eKey7)){Frank.Walk(Frank.x - 10, Frank.y - 10, eNoBlock, eWalkableAreas);} // Up Left
    if (IsKeyPressed(eKeyE) || IsKeyPressed(eKey9)){Frank.Walk(Frank.x + 10, Frank.y - 10, eNoBlock, eWalkableAreas);} // Up Right
    if (IsKeyPressed(eKeyR) || IsKeyPressed(eKeyF) || IsKeyPressed(eKeyV)){Frank.Animate(Random(1), 5, eOnce, eBlock, eForwards);} // Idle
    if (IsKeyPressed(eKeyS) || IsKeyPressed(eKey5) || IsKeyPressed(eKeyNumPad5)){Frank.Walk(Frank.x, Frank.y + 10, eNoBlock, eWalkableAreas);} // Down 
    if (IsKeyPressed(eKeyX) || IsKeyPressed(eKey2) || IsKeyPressed(eKeyDownArrow)){Frank.Walk(Frank.x, Frank.y + 10, eNoBlock, eWalkableAreas);} // Down 
    if (IsKeyPressed(eKeyZ) || IsKeyPressed(eKey1)){Frank.Walk(Frank.x - 10, Frank.y + 10, eNoBlock, eWalkableAreas);} // Down Left
    if (IsKeyPressed(eKeyC) || IsKeyPressed(eKey3)){Frank.Walk(Frank.x + 10, Frank.y + 10, eNoBlock, eWalkableAreas);} // Down Right
  }
  if (twoplayer == false && (player.Room != 1) && player.Room != 4) // if singleplayer enabled, and NUMPAD or WASD directions hit, then move Prototype in that direction
  {
    // WASD
    if (IsKeyPressed(eKeyA)){player.Walk(player.x - 10, player.y, eNoBlock, eWalkableAreas);} // Left
    if (IsKeyPressed(eKeyD)){player.Walk(player.x + 10, player.y, eNoBlock, eWalkableAreas);} // Right
    if (IsKeyPressed(eKeyW)){player.Walk(player.x, player.y - 10, eNoBlock, eWalkableAreas);} // Up
    if (IsKeyPressed(eKeyQ)){player.Walk(player.x - 10, player.y - 10, eNoBlock, eWalkableAreas);} // Up Left
    if (IsKeyPressed(eKeyE)){player.Walk(player.x + 10, player.y - 10, eNoBlock, eWalkableAreas);} // Up Right 
    if (IsKeyPressed(eKeyX)){player.Walk(player.x, player.y + 10, eNoBlock, eWalkableAreas);} // Down 
    if (IsKeyPressed(eKeyZ)){player.Walk(player.x - 10, player.y + 10, eNoBlock, eWalkableAreas);} // Down Left
    if (IsKeyPressed(eKeyC)){player.Walk(player.x + 10, player.y + 10, eNoBlock, eWalkableAreas);} // Down Right
  }

  // SORT OF TESTING
  if (going == true && cPrototype.Moving == false) // Continue walking after shooting
  {
    Wait(25);
    if (gatling == false)
    {
      cPrototype.LockView(4);
      cPrototype.SetIdleView(4, 10);
      cPrototype.SetWalkSpeed(ProtoSpd + 1, ProtoSpd + 2); // Faster with the hand cannon
    }
    else if (gatling == true)
    {
      cPrototype.LockView(1);
      cPrototype.SetIdleView(6, 10);
      cPrototype.SetWalkSpeed(ProtoSpd, ProtoSpd + 1); // Slower with the gatling
    }
  ProcessClick(PosX, PosY, eModeWalkto);
  going = false;
  }
  
  if (IsKeyPressed(eKeyEscape)) // ANY Room
  { 
    RestartGame();
    // QuitGame(1); // Quit
  }
  if (IsKeyPressed(eKeyTab) && (player.Room != 1)) // Show score
  {
    Meter.Scaling = 50;
    Meter.ChangeRoom(2, cPrototype.x-458, 105);
    Meter.Animate(0, 7, eOnce, eNoBlock, eForwards);
    if (game.score < 20){Meter.LockViewFrame(69, 0, 0);}
    else if (20 < game.score < 40){Meter.LockViewFrame(69, 0, 1);}
    else if (40 < game.score < 60){Meter.LockViewFrame(69, 0, 2);}
    else if (60 < game.score < 80){Meter.LockViewFrame(69, 0, 3);}
    else if (80 < game.score < 100){Meter.LockViewFrame(69, 0, 4);}
    else if (100 < game.score < 120){Meter.LockViewFrame(69, 0, 5);}
    else if (120 < game.score < 140){Meter.LockViewFrame(69, 0, 6);}
    else if (140 < game.score < 160){Meter.LockViewFrame(69, 0, 7);}
    else if (160 < game.score < 180){Meter.LockViewFrame(69, 0, 8);}
    else if (180 < game.score < 200){Meter.LockViewFrame(69, 0, 9);}
    else if (200 < game.score < 220){Meter.LockViewFrame(69, 0, 10);}
    else if (220 < game.score < 240){Meter.LockViewFrame(69, 0, 11);}
    else if (240 < game.score < 260){Meter.LockViewFrame(69, 0, 12);}
    else if (260 < game.score < 280){Meter.LockViewFrame(69, 0, 13);}
    else if (280 < game.score < 999){Meter.LockViewFrame(69, 0, 14);}
    else if (game.score > 999){Meter.LockViewFrame(69, 0, 0);}
    Wait(10);
    Meter.ChangeRoom(-1);
    Meter.Scaling = 100;
  }
  if (IsKeyPressed(eKeyDelete) || (IsKeyPressed(eKeyBackspace)) && player.Room != 1 && player.Room != 4) // Alternate swap from wheel
  {
    if (gatling == false) // Gatling switch
    {
      gatling = true;
      cPrototype.LockView(5);
      cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eForwards);
      cPrototype.ChangeView(1);
    }
    else if (gatling == true) // Hand cannon switch
    {
      gatling = false;
      cPrototype.LockView(5);
      cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eBackwards);
      cPrototype.ChangeView(4);
    }
  }
  if (IsKeyPressed(403) || IsKeyPressed(404) && (player.Room != 1) && player.Room != 4) // Deploy chicken
  {
    if (chick == true)
    {
    if (player.x > mouse.x+30+GetViewportX() && (player.Room != 1)) // Chicken left
    {    
      cPrototype.LockView(136);
      cPrototype.Animate(1, 2, eOnce, eBlock);
      Chicken.ChangeRoom(player.Room, player.x-15, player.y);
      Chicken.Walk(mouse.x+GetViewportX(), mouse.y+GetViewportY(), eNoBlock, eWalkableAreas);
      Wait(15);
      cPrototype.UnlockView();
    }
    else if (player.x-50 < mouse.x+GetViewportX() && (player.Room != 1)) // Chicken right
    {
      cPrototype.LockView(136);
      cPrototype.Animate(2, 2, eOnce, eBlock);
      Chicken.ChangeRoom(player.Room, player.x+15, player.y);
      Chicken.Walk(mouse.x+GetViewportX(), mouse.y+GetViewportY(), eNoBlock, eWalkableAreas);
      Wait(15);
      cPrototype.UnlockView();
    }
    }
    chick = false;
  }
  if (IsKeyPressed(eKeySpace) || IsKeyPressed(405) || IsKeyPressed(406) && (player.Room != 1) && player.Room != 4)
  {
    if (deployed == true) // Caltrop boom
    {    
      deployed = false;
      Caltrop.Animate(3, 15, eOnce, eBlock, eForwards); // Stop
      Caltrop.LockView(150);
      cShot.Scaling = 170;
      Caltrop.Animate(1, 1, eOnce, eNoBlock, eForwards); // Caltrop explodes
      Wait(15);
      cShot.on = false;
      Caltrop.UnlockView();
      Caltrop.ChangeRoom(-1);
      cShot.Scaling = 100;
    }
    // Sword goes left/right, not up
    else if (player.x > mouse.x+30+GetViewportX() && (player.Room != 1) && player.Room != 4) // Nodachi samurai sword left
    {
      if (swordstart == true) // No unsheathing, just go
      {
        SetTimer(5, 40);
        cPrototype.LockView(Random(4) + 144);
        cShot.on = true;
        cShot.Transparency = 100;
        cShot.ChangeRoom(player.Room, player.x, player.y+9);
        cShot.Move(player.x-ProtoSRch, player.y+ProtoSRch, eNoBlock, eAnywhere);
        if (Random(1) == 1)
        {
          cPrototype.Animate(Random(1), ProtoSSpd, eOnce, eBlock, eForwards);
        }
        else
        {
          cPrototype.Animate(Random(1), ProtoSSpd, eOnce, eBlock, eBackwards);
        }
        //  cPrototype.UnlockView();
      }
    }
    else if (player.x-50 < mouse.x+GetViewportX() && (player.Room != 1) && player.Room != 4) // Nodachi samurai sword right
    {
      if (swordstart == true) // No unsheathing, just go
      {
        SetTimer(5, 40);
        cPrototype.LockView(Random(4) + 144);
        cShot.on = true;
        cShot.Transparency = 100;
        cShot.ChangeRoom(player.Room, player.x, player.y+9);
        cShot.Move(player.x+ProtoSRch, player.y+ProtoSRch, eNoBlock, eAnywhere);
        if (Random(1) == 1)
        {
          cPrototype.Animate(Random(1) + 2, ProtoSSpd, eOnce, eBlock, eForwards);
        }
        else
        {
          cPrototype.Animate(Random(1) + 2, ProtoSSpd, eOnce, eBlock, eBackwards);
        }
        //  cPrototype.UnlockView();
      }
    }
  }
  if (IsKeyPressed(eKeyReturn) && (player.Room != 1) && player.Room != 4)
  {
    if (shotgun == true) // Quad-barrel shotgun blast once a round
    { 
      if (player.y-75 > mouse.y+70+GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // shotgun up
      {
        cPrototype.LockView(9);
        cPrototype.Animate(1, 2, eOnce, eBlock);
        Wait(10);
        cShot.on = true;
        cShot.Transparency = 0;
        cShot.ChangeRoom(player.Room, player.x, player.y-70);
        cShot.Move(player.x, player.y-1600, eNoBlock, eAnywhere);
        cPrototype.Animate(3, 3, eOnce, eBlock);
        cPrototype.Animate(6, 2, eOnce, eNoBlock);
        cPrototype.Move(player.x, player.y + 10, eNoBlock, eWalkableAreas);
      }
      else if (player.y+75 < mouse.y-15-GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // shotgun down
      {     
        cPrototype.LockView(9);
        cPrototype.Animate(2, 2, eOnce, eBlock);
        Wait(10);
        cShot.on = true;
        cShot.Transparency = 0;
        cShot.ChangeRoom(player.Room, player.x, player.y+15);
        cShot.Move(player.x, player.y+1600, eNoBlock, eAnywhere);
        cPrototype.Animate(0, 3, eOnce, eBlock);
        cPrototype.Animate(4, 2, eOnce, eNoBlock);
        cPrototype.Move(player.x, player.y - 10, eNoBlock, eWalkableAreas);
      }
      else if (player.x > mouse.x+30+GetViewportX()) // shotgun left
      { 
        cPrototype.LockView(9);
        cPrototype.Animate(1, 2, eOnce, eBlock);
        Wait(10);
        cShot.on = true;
        cShot.Transparency = 0;
        cShot.ChangeRoom(player.Room, player.x, player.y-15);
        cShot.Move(player.x - 1600, player.y+15, eNoBlock, eAnywhere);
        cPrototype.Animate(7, 3, eOnce, eBlock);
        cPrototype.Animate(6, 2, eOnce, eNoBlock);
        cPrototype.Move(player.x + 15, player.y, eNoBlock, eWalkableAreas);
      }
      else if (player.x-50 < mouse.x+GetViewportX()) // shotgun right
      { 
        cPrototype.LockView(9);
        cPrototype.Animate(2, 2, eOnce, eBlock);
        Wait(10);
        cShot.on = true;
        cShot.Transparency = 0;
        cShot.ChangeRoom(player.Room, player.x, player.y-15);
        cShot.Move(player.x + 1600, player.y+15, eNoBlock, eAnywhere);
        cPrototype.Animate(5, 3, eOnce, eBlock);
        cPrototype.Animate(4, 2, eOnce, eNoBlock);
        cPrototype.Move(player.x - 15, player.y, eNoBlock, eWalkableAreas);
      }
      if (turned == false && Random(1) == 1){if (InnocentDamsel.Room == 2){InnocentDamsel.SayBackground("Save me, then blast them with that big gun!");} else if (InnocentBanker.Room == 2){InnocentBanker.SayBackground("Watch the buckshot! These pants are Brioni!");} else if (InnocentHipster.Room == 2){InnocentHipster.SayBackground("No way, that gun is awesome!");} else if (InnocentVgirl.Room == 2){InnocentVgirl.SayBackground("You are like so over-compensating with that gun Mr. Macho.");}}
      shotgun = false;
    }
    else if (mantis == true && (player.Room != 1)) // deploy THE MANTIS CALTROP
    {
      if (turned == false && Random(1) == 1){if (InnocentDamsel.Room == 2){InnocentDamsel.SayBackground("What is that spinny blade thing?");} else if (InnocentBanker.Room == 2){InnocentBanker.SayBackground("Keep that contraption away from me!");} else if (InnocentHipster.Room == 2){InnocentHipster.SayBackground("Dude that thing is sick!");} else if (InnocentVgirl.Room == 2){InnocentVgirl.SayBackground("Keep your creepy traps away from me!");}}
      Caltrop.Scaling = 80;
      deployed = true;
      mantis = false;
      cPrototype.LockView(136);
      cPrototype.Animate(0, 5, eOnce, eBlock, eForwards); // Player deploys
      cPrototype.UnlockView();
      Caltrop.ChangeRoom(player.Room, cPrototype.x, cPrototype.y - 5);
      Caltrop.LockView(130);
      Caltrop.Animate(0, 5, eOnce, eBlock, eForwards); // Start
      cShot.on = true;
      cShot.Scaling = 80;
      cShot.Transparency = 100;
      cShot.ChangeRoom(player.Room, cPrototype.x, cPrototype.y - 5);
      Caltrop.Animate(1, 5, eRepeat, eNoBlock, eForwards);
      SetTimer(10, 500); // How long it whirres
    }
    else if (deployed == true && (player.Room != 1)) // Caltrop boom
    {
      deployed = false;
      Caltrop.Animate(3, 15, eOnce, eBlock, eForwards); // Stop
      Caltrop.LockView(150);
      cShot.Scaling = 150;
      Caltrop.Animate(2, 1, eOnce, eNoBlock, eForwards); // Caltrop explodes
      Wait(15);
      cShot.on = false;
      Caltrop.UnlockView();
      Caltrop.ChangeRoom(-1);
      cShot.Scaling = 100;
    }
    else if (player.Room != 1) // No shotgun or caltrop, then chicken
    {
      if (chick == true)
      {
      if (player.x > mouse.x+30+GetViewportX()) // Chicken left
      {    
        cPrototype.LockView(136);
        cPrototype.Animate(1, 2, eOnce, eBlock);
        Chicken.ChangeRoom(player.Room, player.x-15, player.y);
        Chicken.Walk(mouse.x+GetViewportX(), mouse.y+GetViewportY(), eNoBlock, eWalkableAreas);
        Wait(15);
        cPrototype.UnlockView();
      }
      else if (player.x-50 < mouse.x+GetViewportX()) // Chicken right
      {
        cPrototype.LockView(136);
        cPrototype.Animate(2, 2, eOnce, eBlock);
        Chicken.ChangeRoom(player.Room, player.x+15, player.y);
        Chicken.Walk(mouse.x+GetViewportX(), mouse.y+GetViewportY(), eNoBlock, eWalkableAreas);
        Wait(15);
        cPrototype.UnlockView();
      }
      }
      chick = false;
    }
    else if (player.Room != 1) // No shotgun or caltrop or chicken, then weapon switch
    {
      if (gatling == false) // Gatling switch
      {
        gatling = true;
        cPrototype.LockView(5);
        cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eForwards);
        cPrototype.ChangeView(1);
      }
      else if (gatling == true) // Hand cannon switch
      {
        gatling = false;
        cPrototype.LockView(5);
        cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eBackwards);
        cPrototype.ChangeView(4);
      }
    }
  }
}

function repeatedly_execute_always() 
{  
  if ((IsTimerExpired(19) == 1) && (ProtoHlth != 0)){cPrototype.Tint(0, 0, 0, 0, 0); hittable = true;} // hittable?

  if (shoot == true && player.Room != 4) // move bullet
  {
    bx += xd;
    by += yd;
    cBullet.x = FloatToInt(bx);
    cBullet.y = FloatToInt(by);
    float bxi = IntToFloat(GetViewportX());
    float byi = IntToFloat(GetViewportY());
    if (bx - bxi < 0.0 || bx - bxi > 1000.0 || by < 0.0 || by > 700.0)
    {
      cBullet.ChangeRoom(-1);
      shoot = false;
    }
  }
}

function on_mouse_click(MouseButton button) 
{
  if (cPrototype.Room == 4) // Credits
  {
    if (button == eMouseWheelNorth)
    {
      cPrototype.Animate(7, 2, eOnce, eBlock, eForwards);
      cPrototype.Move(cPrototype.x, cPrototype.y-5, eBlock, eWalkableAreas);
      cPrototype.Animate(2, 5, eRepeat, eNoBlock, eForwards); // Motorbiking
      aNormalSpeed.Play(eAudioPriorityVeryLow, eRepeat);
    }
    else if (button == eMouseWheelSouth)
    {
      cPrototype.Animate(6, 2, eOnce, eBlock, eForwards);
      cPrototype.Move(cPrototype.x, cPrototype.y+5, eBlock, eWalkableAreas);
      cPrototype.Animate(2, 5, eRepeat, eNoBlock, eForwards); // Motorbiking
      aNormalSpeed.Play(eAudioPriorityVeryLow, eRepeat);
    }
    else if (button == eMouseMiddle)
    {
      // Add horn
      if (cPrototype.y < 735){cPrototype.Animate(6, 2, eOnce, eBlock, eForwards);} else {cPrototype.Animate(7, 2, eOnce, eBlock, eForwards);}
      cPrototype.Move(512, 735, eBlock, eWalkableAreas);
      cPrototype.Animate(2, 5, eRepeat, eNoBlock, eForwards); // Motorbiking
      aNormalSpeed.Play(eAudioPriorityVeryLow, eRepeat);
    }
    else if (button == eMouseLeft)
    {
      if (Random(1) == 1){cPrototype.Animate(4, 1, eOnce, eBlock, eBackwards);} // Shooting
      else {cPrototype.Animate(4, 1, eOnce, eBlock, eForwards);} // Shooting
      cBBullet.ChangeRoom(4, cPrototype.x + 55, cPrototype.y - 45); cBBullet.Move(cPrototype.x + 800, cPrototype.y - 40,  eNoBlock, eAnywhere);
      cBullet.ChangeRoom(4, cPrototype.x + 55, cPrototype.y - 45); cBullet.Move(cPrototype.x + 800, cPrototype.y - 40,  eNoBlock, eAnywhere);
      cPrototype.Animate(2, 5, eRepeat, eNoBlock, eForwards); // Motorbiking
      aNormalSpeed.Play(eAudioPriorityVeryLow, eRepeat);
    }
    else // (button == eMouseRight)
    {
      BckDrop.StopMoving();
      BckDrop.SetWalkSpeed(-5, -5);
      BckDrop.Move(-880, 718, eNoBlock, eAnywhere); // Smarter way to move background
      cPrototype.Animate(5, 3, eOnce, eBlock, eForwards);
      cPrototype.Animate(2, 5, eRepeat, eNoBlock, eForwards); // Motorbiking
      aNormalSpeed.Play(eAudioPriorityVeryLow, eRepeat);
      BckDrop.StopMoving();
      BckDrop.SetWalkSpeed(-30, -30);
      BckDrop.Move(-880, 718, eNoBlock, eAnywhere); // Smarter way to move background
    }
  }
  else if (player.Room != 1)
  {
  //  player.UnlockView();
  if (cBBullet.Room == 2){Wait(2); cBBullet.ChangeRoom(-1);} // Get rid of the boss bullet
  // Mouse button is clicked, button is either LEFT or RIGHT
  if (button == eMouseLeft && (IsTimerExpired(1)) && player.Room != 4) // Shooting
  {
    mouse.Mode = eModeTarget;
    cBullet.ChangeRoom(player.Room, player.x, player.y); // bullet appears
    bx = IntToFloat(player.x - (Random(ProtoAccuracy)) + (Random(ProtoAccuracy)));
    by = IntToFloat(player.y-50 - (Random(ProtoAccuracy)) + (Random(ProtoAccuracy)));
    xd = IntToFloat(mouse.x-player.x+GetViewportX() - (Random(ProtoAccuracy)) + (Random(ProtoAccuracy)));
    yd = IntToFloat(mouse.y-player.y+50+GetViewportY() - (Random(ProtoAccuracy)) + (Random(ProtoAccuracy)));
    float l = Maths.Sqrt(xd*xd + yd*yd);
    if (gatling == true) // got the bolt action gatling
    {
      SetTimer(1, ProtoRld); // gatling gun has a faster reload
      bulletspeed = IntToFloat(20); // gatling gun has a faster bullet
      cBullet.Tint(0, 0, 0, 0, 0); // gatling gun has a standard color bullet
      cBullet.Scaling = 100; // gatling gun has normal size bullet
      player.LockView(7); // gatling gun view
    }
    else if (gatling == false) // got the bolt action hand cannon
    {
      SetTimer(1, ProtoRld + 20); // hand cannon has a slower reload
      bulletspeed = IntToFloat(16); // hand cannon has a slower bullet
      cBullet.Tint(250, 150, 150, 50, 100); // hand cannon has a red bullet
      cBullet.Scaling = 80; // hand cannon has smaller bullet
      player.LockView(Random(4)+31); // hand cannon view (use a variety of views)
    }
    xd = bulletspeed*xd/l;
    yd = bulletspeed*yd/l;
    player.StopMoving();
    player.Animate(player.Loop, ProtoSwtch, eOnce, eNoBlock);
    // TESTING TESTING TESTING TESTING TESTING TESTING TESTING TESTING ADDING
    if (player.x > mouse.x+100+GetViewportX()) // left
    {      
      if (player.y-75 > mouse.y+70+GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // up-left
      {
        player.Animate(7, ProtoSwtch, eOnce, eNoBlock);
      }
      else if (player.y+75 < mouse.y-15-GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // down-left
      { 
        player.Animate(6, ProtoSwtch, eOnce, eNoBlock);
      }
      else // true left
      {
        player.Animate(1, ProtoSwtch, eOnce, eNoBlock);
      }
    }
    else if (player.x-100 < mouse.x+GetViewportX()) // right
    {  
      if (player.y-75 > mouse.y+70+GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // up-right
      {
        player.Animate(5, ProtoSwtch, eOnce, eNoBlock);
      }
      else if (player.y+75 < mouse.y-15-GetViewportY() && player.x+200 > mouse.x+GetViewportX() && player.x-200 < mouse.x+GetViewportX()) // down-right
      { 
        player.Animate(4, ProtoSwtch, eOnce, eNoBlock);
      }
      else // true right
      {
        player.Animate(2, ProtoSwtch, eOnce, eNoBlock);
      }
    }
    // TESTING TESTING TESTING TESTING TESTING TESTING TESTING TESTING ADDING
    shoot = true;
    ProcessClick(mouse.x, mouse.y, eModeTarget);
  }
  else if (button == eMouseLeft) // Bunker exploring
  {
    if (GetLocationType(mouse.x, mouse.y) == eLocationCharacter)
    {
      mouse.Mode = eModeTalkto;  // Talk to someone in the bunker
      ProcessClick(mouse.x, mouse.y, eModeTarget);
    }
    else if (GetLocationType(mouse.x, mouse.y) == eLocationHotspot || eLocationObject || eLocationNothing)
    {
      mouse.Mode = eModeInteract; // Interact with stuff
      ProcessClick(mouse.x, mouse.y, eModeTarget);
    }
  }
  else if (button == eMouseRight) // Walking
  {
    mouse.Mode = eModeWalkto;
    if (cBBullet.Room == 2){Wait(10); cBBullet.ChangeRoom(-1);} // Get rid of the boss bullet
    if (gatling == false)
    {
      cPrototype.LockView(4);
      cPrototype.SetIdleView(4, 10);
      cPrototype.SetWalkSpeed(ProtoSpd + 1, ProtoSpd + 2); // Faster with the hand cannon
    }
    else if (gatling == true)
    {
      cPrototype.LockView(1);
      cPrototype.SetIdleView(6, 10);
      cPrototype.SetWalkSpeed(ProtoSpd, ProtoSpd + 1); // Slower with the gatling
    }
    
    // Continue walking after shooting
    // if (mouse.Mode == eModeWalkto && IsInteractionAvailable(mouse.x, mouse.y, eModeWalkto) == 1) 
    // {  
    //   PosX = mouse.x;
    //   PosY = mouse.y;
    //   going = true;
    // }
    // else
    // {
    //   going = false;
    // }
    ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
  else if (button == eMouseWheelNorth || button == eMouseWheelSouth || button == eMouseMiddle && (player.Room != 1)) 
  { 
    // Set to gatling gun or hand cannon
    if (gatling == false)
    {
      gatling = true;
      cPrototype.LockView(5);
      cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eForwards);
      cPrototype.ChangeView(1);
    }
    else if (gatling == true)
    {
      gatling = false;
      cPrototype.LockView(5);
      cPrototype.Animate(player.Loop, ProtoSwtch, eOnce, eBlock, eBackwards);
      cPrototype.ChangeView(4);
    }
   }
}}

function on_key_press(eKeyCode keycode)
{
  if ((keycode == eKeyCtrlB) || (keycode == eKeyF10) || (keycode == eKeyF1) && (player.Room != 1)) // BOSS Button
  { 
    Bossbutton.Centre(); Bossbutton.Visible = true;
  }
}

function DistWithin(this Character*, int dist) 
{
  int xdis = player.x - this.x, ydis = player.y - this.y;
  ydis = ydis*2;
  return xdis*xdis + ydis*ydis <= dist*dist;
}

function dialog_request(int param) 
{
}

function txtname_OnActivate(GUIControl *control)
{
  txtname.Enabled = false; Namebox.Visible = false;
}

function Bossbutton_OnClick(GUI *theGui, MouseButton button)
{
  Bossbutton.Visible = false;
}

function Button2_OnClick(GUIControl *control, MouseButton button)
{

}

function Button4_OnClick(GUIControl *control, MouseButton button)
{

}

function Button5_OnClick(GUIControl *control, MouseButton button)
{

}

function Button9_OnClick(GUIControl *control, MouseButton button)
{

}

function Button11_OnClick(GUIControl *control, MouseButton button)
{

}

function Button15_OnClick(GUIControl *control, MouseButton button)
{

}

function Button20_OnClick(GUIControl *control, MouseButton button)
{

}

function Button22_OnClick(GUIControl *control, MouseButton button)
{

}

function Button1_OnClick(GUIControl *control, MouseButton button)
{

}

