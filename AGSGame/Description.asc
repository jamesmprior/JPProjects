// Main script for module 'Description'

Descriptions Description;
export Description;

function Descriptions::OLTidy() 
{
  if (this.DisplayType==eDescDisplayOverlay && this.ol!=null &&
		  this.ol.Valid) {
    this.ol.Remove();
  }
}

function Descriptions::GUIMode(GUIControl *gc) 
{
  this.OLTidy();
  if (gc==null) { 
		Display("ERROR! null GUIControl passed to Description.GUIMode, contact game author");
		return -1;
  }		
  this.DisplayType=eDescDisplayGUIControl;
  this.gc=gc;
}

function Descriptions::OverlayMode() 
{
  this.DisplayType=eDescDisplayOverlay;
}

function Descriptions::StringOnly() 
{
  this.OLTidy();
  this.DisplayType=eDescDisplayNone;
}

protected function Descriptions::Update_String() 
{
  // Special case of busy cursor
  if ((mouse.Mode==this.NoDescriptionWhenMode) ||
			(this.NoDescriptionWhenNotMode>=0 && mouse.Mode!=this.NoDescriptionWhenNotMode) ||
		  (this.NoDescriptionWhenMode==eModeWait && IsInterfaceEnabled()==0)) 
  { 
		this.Text=""; return;
	}
  String hs=Game.GetLocationName(mouse.x, mouse.y);
  if (this.IncludeInventory && InventoryItem.GetAtScreenXY(mouse.x, mouse.y)!=null) 
  {
    InventoryItem *ii=InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    hs=ii.Name;
	}
#ifdef AGS_SUPPORTS_IFVER
	if (this.ButtonsWithFont>=0 && GUIControl.GetAtScreenXY(mouse.x, mouse.y)!=null) 
  {
	  GUIControl *bb=GUIControl.GetAtScreenXY(mouse.x, mouse.y);
	  if (bb.AsButton!=null && bb.AsButton.Font==this.ButtonsWithFont) hs=bb.AsButton.Text;
	}
#endif
  String verb="";
  if (this.VerbMode==eDescVerbModeNever || (hs=="" && this.NoVerbOverNothing) ) 
  {
		this.Text=hs;
		return;
  } 
  else if (player.ActiveInventory!=null && mouse.Mode==eModeUseinv) 
  {
    String ai=player.ActiveInventory.Name;
    if (this.VerbMode==eDescVerbModeUser && this.VerbS!=null) verb=this.VerbS;
    else verb=this.UseS;
    this.Text=String.Format("%s %s %s %s", verb, ai, this.PrepositionS, hs);
  } 
  else if (this.VerbMode==eDescVerbModeUseOnly) 
  {
		this.Text=hs;
		return;
  } 
  else 
  {
    if (this.VerbMode==eDescVerbModeAuto) 
    {
      if (mouse.Mode==eModeLookat) verb=this.LookS;
      if (mouse.Mode==eModePickup) verb=this.GetS;
      if (mouse.Mode==eModeTalkto) verb=this.TalkS;
      if (mouse.Mode==eModeInteract) verb=this.UseS;
      if (mouse.Mode==eModeWalkto) verb=this.WalkS;
    } 
    else if (this.VerbS!=null) verb=this.VerbS;
    
    this.Text=String.Format("%s %s", verb, hs);
	}
	if (this.NoDescriptionWhenNoVerb && verb=="") this.Text="";
}

protected function Descriptions::Update_Position(int font, int width) 
{
  if (this.Location==eDescLocationFollow || 
			(this.Location==eDescLocationSticky && this.Text!="" && this.Text != this.last)) 
  {
		this.width=GetTextWidth(this.Text, font);
		this.height=GetTextHeight(this.Text, font, width);
//  this.x = mouse.x + this.OffsetX - (this.width/2);
		this.x = mouse.x + this.OffsetX;
    if (this.OLAlignment==eAlignCentre) this.x-=this.width/2;
    else if (this.OLAlignment==eAlignRight) this.x-=this.width;
		if ((this.x + this.width) > this.MaxX) this.x = this.MaxX - this.width;
		if (this.x < this.MinX) this.x = this.MinX;
		this.y = mouse.y + this.OffsetY;
		if ((this.y + this.height) > this.MaxY) this.y = this.MaxY - this.height;
		if (this.y < this.MinY) this.y = this.MinY;
	}
}

protected function Descriptions::Update_DS() 
{
  this.ds=DynamicSprite.Create(this.OLWidth, this.height);
  DrawingSurface *dsds=this.ds.GetDrawingSurface();
  dsds.DrawingColor=this.OLColor;
  dsds.DrawStringWrapped(0, 0, this.OLWidth, this.OLFont, eAlignLeft, this.Text);
  dsds.Release();
}

protected function Descriptions::Update_Overlay() 
{
  if (this.Text=="") 
  {
    this.OLTidy();
  } 
  else 
  {
		this.Update_Position(this.OLFont, this.OLWidth);	
		if (this.ol!=null && this.ol.Valid) 
    {
      if (this.OLSierraBG) 
      {
        this.Update_DS();
        this.ol=Overlay.CreateGraphical(this.x, this.y, this.ds.Graphic, true);
      } 
      else 
      {
        this.ol.SetText(this.OLWidth, this.OLFont, this.OLColor, this.Text);
        this.ol.X = this.x; // so the position of the overlay will be adjusted every game loop
        this.ol.Y = this.y;
      }
		} 
    else 
    {
      if (this.OLSierraBG) 
      {
        this.Update_DS();
        this.ol=Overlay.CreateGraphical(this.x, this.y, this.ds.Graphic, true);
      } 
      else 
      {
			  this.ol=Overlay.CreateTextual(this.x, this.y, this.OLWidth, this.OLFont, this.OLColor, this.Text);
      }
		}  
	}
}      

protected function Descriptions::Update_GUI() 
{
	int font;
	if (this.gc.AsLabel!=null) font=this.gc.AsLabel.Font;
#ifdef AGS_SUPPORTS_IFVER
	else if (this.gc.AsButton!=null) font=this.gc.AsButton.Font;
#endif
	
	if (this.CropGUIToo) this.Update_Position(font, this.MaxX-this.MinX);
	else this.Update_Position(font, this.gc.OwningGUI.Width);

	if (this.Location!=eDescLocationStatic) 
  {
		this.gc.OwningGUI.X=this.x;
		this.gc.OwningGUI.Y=this.y;
		this.gc.Width=this.width+1;
		if (this.CropGUIToo) this.gc.OwningGUI.Width=this.width+2;
	}	
  if (this.gc.AsLabel!=null) this.gc.AsLabel.Text=this.Text;
  else if (this.gc.AsButton!=null) this.gc.AsButton.Text=this.Text;
  
  // Fade control
	if ((this.Text=="") && (this.gc.OwningGUI.Visible) && (this.alpha<this.FadeStart)) 
  {
    this.alpha+=this.FadeOutSpeed;
    if (this.alpha>=this.FadeStart) this.gc.OwningGUI.Visible=false;
  } 
  else if (this.Text!="") 
  {
    if (!this.gc.OwningGUI.Visible) 
    {
      this.gc.OwningGUI.Visible=true;
      this.alpha=this.FadeStart;
    } 
    else if (this.alpha>this.FadeEnd) 
    {
      this.alpha-=this.FadeInSpeed;
    }
	}
	if (this.alpha>100) this.alpha=100;
	else if (this.alpha<0) this.alpha=0;
	this.gc.OwningGUI.Transparency=this.alpha;
}
  
function Descriptions::rep_ex() 
{
  this.last=this.Text;
  this.Update_String();
  if (this.DisplayType==eDescDisplayGUIControl) 
  {
    this.Update_GUI();
  } 
  else if (this.DisplayType==eDescDisplayOverlay) 
  {
		this.Update_Overlay();
	}
}

function repeatedly_execute_always() 
{
  // Should this go in rep_ex_always?
  // easy enough for user to change, if required
  Description.rep_ex();
}

function on_event(EventType event, int data) 
{
  if (event==eEventLeaveRoom) Description.OLTidy();
}

function game_start() 
{
  // Set up defaults
  Description.LookS="Look at";
  Description.GetS="Get";
  Description.UseS="Use";
  Description.PrepositionS="on";
  Description.TalkS="Talk to";
  Description.WalkS="Walk to";
  Description.IncludeInventory=true;
  Description.NoVerbOverNothing=true;
  Description.OLWidth=600;
  Description.OLAlignment=eAlignCentre;
  Description.FadeStart=100;
  Description.FadeEnd=0;
  Description.FadeInSpeed=5;
  Description.FadeOutSpeed=5;
  Description.OffsetX=-16;
  Description.OffsetY=16;
  Description.MinX=0;
  Description.MinY=0;
  Description.MaxX=system.viewport_width-1;
  Description.MaxY=system.viewport_height-1;
  // Overlay mode
  Description.CropGUIToo=true;
  // Description.Location=eDescLocationStatic;
  // Description.Location = eDescLocationSticky;
  Description.VerbMode = eDescVerbModeUseOnly;
  Description.OLColor=57900;
  // Use which font
  // Description.OLFont=eFontSpeechOutline;
  Description.ButtonsWithFont=-1;
  Description.NoDescriptionWhenMode=-1;
  Description.OLSierraBG=false;
  // Description.NoDescriptionWhenNotMode=1;
  Description.OverlayMode();
}
