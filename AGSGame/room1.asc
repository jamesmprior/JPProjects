// Bolt-Action Menu
function room_AfterFadeIn()
{
  
// Small Credits
SmallCredits.SetPosition(505, 192);
SmallCredits.Visible = true;
Creditbox.Visible = true;
Creditbox.AddItem("By: James P.(KConan), Pinback, & YD (Music)");
Creditbox.AddItem("Made w/ AGS Engine & SSH's Modules");
Creditbox.AddItem("Beat the game for full credits!");
Creditbox.AddItem("");

Menumoon.Tint(100, 100, 100, Random(100), Random(100));  
 
if (File.Exists("highscores.txt"))
{
  // Read in top ten World
  Scorelist.Clear();
  String sname[11];
  String sround[11];
  String slist[11];
  
  Scoretable.SetPosition(405, 278);
  ScoreTitle.Text = "World Scores";
  ScoreTitle.Visible = true;
  Scoretable.Visible = true;
  playername = txtname.Text; // Get player name from input below
  
  // Add reading all 10 lines of data
  File *I = File.Open("highscores.txt", eFileRead);
  Scorelist.AddItem("NAME      SCORE");
  
  I.ReadRawLineBack(); // First line
  String line1 = I.ReadRawLineBack(); String line11 = line1.Replace("|","    ",false); line11 = line11.Replace("ZZ","",false); Scorelist.AddItem(line11);
  String line2 = I.ReadRawLineBack(); String line12 = line2.Replace("|","    ",false); line12 = line12.Replace("ZZ","",false); Scorelist.AddItem(line12);
  String line3 = I.ReadRawLineBack(); String line13 = line3.Replace("|","    ",false); line13 = line13.Replace("ZZ","",false); Scorelist.AddItem(line13);
  String line4 = I.ReadRawLineBack(); String line14 = line4.Replace("|","    ",false); line14 = line14.Replace("ZZ","",false); Scorelist.AddItem(line14);
  String line5 = I.ReadRawLineBack(); String line15 = line5.Replace("|","    ",false); line15 = line15.Replace("ZZ","",false); Scorelist.AddItem(line15);
  String line6 = I.ReadRawLineBack(); String line16 = line6.Replace("|","    ",false); line16 = line16.Replace("ZZ","",false); Scorelist.AddItem(line16);
  String line7 = I.ReadRawLineBack(); String line17 = line7.Replace("|","    ",false); line17 = line17.Replace("ZZ","",false); Scorelist.AddItem(line17);
  String line8 = I.ReadRawLineBack(); String line18 = line8.Replace("|","    ",false); line18 = line18.Replace("ZZ","",false); Scorelist.AddItem(line18);
  String line9 = I.ReadRawLineBack(); String line19 = line9.Replace("|","    ",false); line19 = line19.Replace("ZZ","",false); Scorelist.AddItem(line19);
  String line10 = I.ReadRawLineBack(); String line20 = line10.Replace("|","    ",false); line20 = line20.Replace("ZZ","",false); Scorelist.AddItem(line20);
}
else // USE LOCAL
{ 
  // Read scores into the local scoretable
  Scorelist.Clear();
  int i = 1;
  String sname[99];
  String sround[99];
  String slist[99];
  int stupiddecrypt;
  int unhideround;

  Scoretable.SetPosition(405, 278);
  ScoreTitle.Text = "Local Scores";
  ScoreTitle.Visible = true;
  Scoretable.Visible = true;
  playername = txtname.Text; // Get player name from input below

  if (!File.Exists("local.dat")) // file not found
  {
    // Display("File "local.dat" not in the game directory.");
    File *output = File.Open("local.dat", eFileRead);
    output = File.Open("local.dat", eFileWrite);
    output.Close();
    return;
  }
  else // file found
  {
    File *I = File.Open("local.dat", eFileRead);
    Scorelist.AddItem("NAME   RND SCORE");
    while (!I.EOF)
    {
      // INCLUDE SORT FOR HIGHEST SCORE AT THE TOP
      sname[i] = I.ReadRawLineBack(); // name
      sround[i] = I.ReadRawLineBack(); // round
      slist[i] = I.ReadRawLineBack(); // score
      sname[i] = sname[i].Append("      ");
	    sname[i] = sname[i].Substring(0, 6); // truncate name
      unhideround = (sround[i].AsInt - 8888);
      stupiddecrypt = (slist[i].AsInt / unhideround);
      if (stupiddecrypt < 9 || stupiddecrypt > 999 || unhideround > 99){stupiddecrypt = 010; unhideround = 01;}
      if ((stupiddecrypt < 500) && (unhideround < 10)){Scorelist.AddItem(String.Format("%s  0%d   0%d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt < 500) && (unhideround > 10)){Scorelist.AddItem(String.Format("%s  %d   0%d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt > 500) && (unhideround < 10)){Scorelist.AddItem(String.Format("%s  0%d   %d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt > 500) && (unhideround > 10)){Scorelist.AddItem(String.Format("%s  %d   %d", sname[i], unhideround, stupiddecrypt));}
      i++;
    }
  if (Random(10) == 1){File.Delete("local.dat");} // local.dat is probably too big
}
}

// Draw a line under "AGS engine"
DrawingSurface *titleline = Room.GetDrawingSurfaceForBackground();
titleline.DrawingColor = Random(255); titleline.DrawLine(391, 739, 639, 739, 2); titleline.Release();

// Show Good Game
if (cPrototype.PreviousRoom == 4)
{
  Goodgame.Visible = true;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Entername.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
}
}

function room_Load()
{
ScoreTitle.Visible = false;
Bossbutton.Visible = false;

SetTimer(14, 80);
SetTimer(15, 180);

// Enter name
Entername.Visible = true;
Scoretable.SetPosition(405, 278);
Namebox.SetPosition(390, 740);
Static1.Visible = true;
Earth.Scaling = 75;

// Make sure player, GUI, and certain modes are turned off
cPrototype.Transparency = 100;
Mouse.DisableMode(eModeWait);
Mouse.DisableMode(eModeTalkto);
Mouse.DisableMode(eModePickup);
Mouse.DisableMode(eModeLookat);
Mouse.DisableMode(eModeUseinv);
Mouse.DisableMode(eModePointer);
Mouse.DisableMode(eModeInteract);

// Use walk or target
Mouse.EnableMode(eModeTarget);
Mouse.EnableMode(eModeWalkto);

// Music
aServitor_menu.Play();
Game.SetAudioTypeVolume(eAudioTypeMusic, 10, eVolChangeExisting);
}

function room_RepExec()
{
Static1.Visible = true;

if (IsTimerExpired(14) && (File.Exists("highscores.txt")))
{
   // Read in top ten World
  Scorelist.Clear();
  String sname[11];
  String sround[11];
  String slist[11];
  
  Scoretable.SetPosition(405, 278);
  ScoreTitle.Text = "World Scores";
  ScoreTitle.Visible = true;
  Scoretable.Visible = true;
  playername = txtname.Text; // Get player name from input below
  
  // Add reading all 10 lines of data
  File *I = File.Open("highscores.txt", eFileRead);
  Scorelist.AddItem("NAME      SCORE");
  
  I.ReadRawLineBack(); // First line
  String line1 = I.ReadRawLineBack(); String line11 = line1.Replace("|","    ",false); line11 = line11.Replace("ZZ","",false); Scorelist.AddItem(line11);
  String line2 = I.ReadRawLineBack(); String line12 = line2.Replace("|","    ",false); line12 = line12.Replace("ZZ","",false); Scorelist.AddItem(line12);
  String line3 = I.ReadRawLineBack(); String line13 = line3.Replace("|","    ",false); line13 = line13.Replace("ZZ","",false); Scorelist.AddItem(line13);
  String line4 = I.ReadRawLineBack(); String line14 = line4.Replace("|","    ",false); line14 = line14.Replace("ZZ","",false); Scorelist.AddItem(line14);
  String line5 = I.ReadRawLineBack(); String line15 = line5.Replace("|","    ",false); line15 = line15.Replace("ZZ","",false); Scorelist.AddItem(line15);
  String line6 = I.ReadRawLineBack(); String line16 = line6.Replace("|","    ",false); line16 = line16.Replace("ZZ","",false); Scorelist.AddItem(line16);
  String line7 = I.ReadRawLineBack(); String line17 = line7.Replace("|","    ",false); line17 = line17.Replace("ZZ","",false); Scorelist.AddItem(line17);
  String line8 = I.ReadRawLineBack(); String line18 = line8.Replace("|","    ",false); line18 = line18.Replace("ZZ","",false); Scorelist.AddItem(line18);
  String line9 = I.ReadRawLineBack(); String line19 = line9.Replace("|","    ",false); line19 = line19.Replace("ZZ","",false); Scorelist.AddItem(line19);
  String line10 = I.ReadRawLineBack(); String line20 = line10.Replace("|","    ",false); line20 = line20.Replace("ZZ","",false); Scorelist.AddItem(line20);
  SetTimer(14, 250);
}
if (IsTimerExpired(15))
{
  // Read scores into the local scoretable
  Scorelist.Clear();
  int i = 1;
  String sname[99];
  String sround[99];
  String slist[99];
  int stupiddecrypt;
  int unhideround;
  
  Scoretable.SetPosition(405, 278);
  ScoreTitle.Text = "Local Scores";
  ScoreTitle.Visible = true;
  Scoretable.Visible = true;
  playername = txtname.Text; // Get player name from input below

  if (!File.Exists("local.dat")) // file not found
  {
    // Display("File "local.dat" not in the game directory.");
    File *output = File.Open("local.dat", eFileRead);
    output = File.Open("local.dat", eFileWrite);
    output.Close();
    return;
  }
  else // file found
  {
    File *I = File.Open("local.dat", eFileRead);
    Scorelist.AddItem("NAME   RND SCORE");
    while (!I.EOF)
    {
      // INCLUDE SORT FOR HIGHEST SCORE AT THE TOP
      sname[i] = I.ReadRawLineBack(); // name
      sround[i] = I.ReadRawLineBack(); // round
      slist[i] = I.ReadRawLineBack(); // score
      sname[i] = sname[i].Append("      ");
	    sname[i] = sname[i].Substring(0, 6); // truncate name
      unhideround = (sround[i].AsInt - 8888);
      stupiddecrypt = (slist[i].AsInt / unhideround);
      if (stupiddecrypt < 9 || stupiddecrypt > 999 || unhideround > 99){stupiddecrypt = 010; unhideround = 01;}
      if ((stupiddecrypt < 500) && (unhideround < 10)){Scorelist.AddItem(String.Format("%s  0%d   0%d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt < 500) && (unhideround > 10)){Scorelist.AddItem(String.Format("%s  %d   0%d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt > 500) && (unhideround < 10)){Scorelist.AddItem(String.Format("%s  0%d   %d", sname[i], unhideround, stupiddecrypt));}
      else if ((stupiddecrypt > 500) && (unhideround > 10)){Scorelist.AddItem(String.Format("%s  %d   %d", sname[i], unhideround, stupiddecrypt));}
      i++;
    }
  if (Random(10) == 1){File.Delete("local.dat");} // local.dat is probably too big
}
  SetTimer(15, 400);
}

if ((mouse.x < 510 && mouse.y >= 276 && mouse.y <= 335))
{

  Startgame.Visible = true;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
  // Hide button text
  TextStart.Visible = true;
  TextQuit.Visible = false;
  TextHelp.Visible = false;
  TextOption.Visible = false;
}
if ((mouse.x < 510 && mouse.y >= 276 && mouse.y <= 335) && mouse.IsButtonDown(eMouseLeft) || mouse.IsButtonDown(eMouseRight))
{
  TextStart.Visible = false;
  Game.SetAudioTypeVolume(eAudioTypeMusic, 15, eVolChangeExisting);
  StartPush.Visible = true; // push start
  Start.Visible = false;
  Wait(20);
  StartPush.Visible = false; // push start
  Start.Visible = true;
  Namebox.Visible = false;
  Scoretable.Visible = false;
  QuickhelpMain.Visible = true;
  if (Random(1) == 1)
  {
    Gameprep.Visible = true;
    Tough.Visible = false; 
  }
  else
  {
    Tough.Visible = true; 
    Gameprep.Visible = false;
  }
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  BAScreen.Visible = false;
  DisplayAtY(755, (Room.Messages[Random(25)])); // Tips
  QuickhelpMain.Visible = false;
  if (twoplayer == true)
  {
    FrankHelp.Visible = true;
    Wait(80);
    FrankHelp.Visible = false;
  }
  aServitor_menu.Stop();
  SmallCredits.Visible = false;
  cPrototype.ChangeRoom(3);
}
if ((mouse.x < 510 && mouse.y >= 336 && mouse.y <= 395))
{
  Quitgame.Visible = true;  
  Startgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false; 
  Tough.Visible = false;
  // Hide button text
  TextStart.Visible = false;
  TextQuit.Visible = true;
  TextHelp.Visible = false;
  TextOption.Visible = false;
}
if ((mouse.x < 510 && mouse.y >= 336 && mouse.y <= 395) && mouse.IsButtonDown(eMouseLeft) || mouse.IsButtonDown(eMouseRight))
{
  TextQuit.Visible = false;
  QuitPush.Visible = true;
  Quit.Visible = false;
  Wait(20);
  Quitgame.Visible = false;  
  Bye1.Visible = true;
  Wait(10);
  Bye1.Visible = false;
  Bye3.Visible = true;
  Wait(30);
  Bye3.Visible = false;
  Quitgame.Visible = true;  
  Wait(5);
  QuitGame(0);
}
if ((mouse.x < 510 && mouse.y >= 396 && mouse.y <= 455))
{
  Gamehelp.Visible = true;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
  // Hide button text
  TextStart.Visible = false;
  TextQuit.Visible = false;
  TextHelp.Visible = true;
  TextOption.Visible = false;
}
if ((mouse.x < 510 && mouse.y >= 396 && mouse.y <= 455) && mouse.IsButtonDown(eMouseLeft) || mouse.IsButtonDown(eMouseRight))
{
// Basic help on
TextHelp.Visible = false;
HelpPush.Visible = true;
Help.Visible = false;
Wait(20);
Bye1.Visible = true;
Wait(10);
Bye1.Visible = false;
Help3.Visible = true;
Wait(30);
Help3.Visible = false;  
Wait(5);
Namebox.Visible = false;
Scoretable.Visible = false;

// Opening procedures
Wait(20);
HelpPush.Visible = false;
Help.Visible = false;
Start.Visible = false;
Quit.Visible = false;
Music.Visible = false;
cPrototype.on = true;
cPrototype.PlaceOnWalkableArea();
cPrototype.Transparency = 0;
cPrototype.LockView(1);

// Show Health
cPrototype.Think("Player HEALTH is displayed in the top left");
Hlth8.Visible = true;
Wait(30);
Hlth8.Visible = false;

// Show WALK
Mouse1.Visible = true;
cPrototype.Think("To WALK, move the cursor to the location and right click");
Mouse1.Visible = false;
Mouse4.Visible = true;
Mouse4.Move(400, 450, 3, eNoBlock, eAnywhere);
// Walker.Visible = true;
// Walker.Move(player.x-50, player.y, 2, eBlock, eAnywhere);
cPrototype.WalkStraight(player.x-50, player.y, eBlock);
Wait(30);
Mouse4.Visible = false;
// Walker.Visible = false;
Mouse4.SetPosition(450, 450);
Mouse1.SetPosition(450, 450);
// Walker.SetPosition(player.x, player.y);

// Show SHOOT (random character is B movie bad guy, insurance company CEO, or hipster)
int Stooge = Random(2) + 6;
Mouse1.Visible = true;
cPrototype.Think("To SHOOT, move the cursor to the bad guy and left click.  Combat is real-time.");
Mouse1.Visible = false;
Mouse2.Visible = true;
if (Stooge == 6){cPrototype.Think("We'll try it on this health insurance company CEO");}
else if (Stooge == 7){cPrototype.Think("We'll try it on this B movie bad guy who is inexplicably holding an exploding barrel");}
else if (Stooge == 8){cPrototype.Think("We'll try it on this annoying hipster");}
Mouse2.Move(400, 450, 3, eNoBlock, eAnywhere);
Shooter.Visible = true;
Shooter.Move(320, 490, 3, eBlock, eAnywhere);
if (Stooge == 6)
{
  InnocentBanker.ChangeRoom(1, 325, 540);
  InnocentBanker.FaceCharacter(cPrototype, eBlock);
  InnocentBanker.Think("Sorry, we have to deny coverage because you neglected to sign the contract using Arial Extra Bold font");
}
else if (Stooge == 7)
{
  BarrelStooge.ChangeRoom(1, 325, 540);
  BarrelStooge.FaceCharacter(cPrototype, eBlock);
  BarrelStooge.Think("I wonder why I'm holding this exploding barrel...Hmmm");
}
else if (Stooge == 8)
{
  InnocentHipster.ChangeRoom(1, 325, 540);
  InnocentHipster.FaceCharacter(cPrototype, eBlock);
  InnocentHipster.Think("You like popular, mainstream bands!?  Hahaha!  I'm cooler than you because I like obscure music such as The Folksy Folkertons and Relevant Elephant");
}
cPrototype.LockView(7);
aGGun_SingleShot_01.Play(eAudioPriorityVeryLow);
cBullet.ChangeRoom(player.Room, player.x, player.y-45);
cBullet.Move(320, 490, eBlock, eAnywhere);
if (Stooge == 6)
{
  InnocentBanker.LockView(25);
  InnocentBanker.Animate(2, 2, eOnce, eBlock);
  cBullet.ChangeRoom(-1);
  Wait(30);
  InnocentBanker.UnlockView();
  InnocentBanker.ChangeRoom(-1);
  Wait(30);
}
else if (Stooge == 7)
{
  BarrelStooge.LockView(28);
  BarrelStooge.Animate(2, 2, eOnce, eBlock);
  cBullet.ChangeRoom(-1);
  Wait(30);
  BarrelStooge.UnlockView();
  BarrelStooge.ChangeRoom(-1);
  Wait(30);
}
else if (Stooge == 8)
{
  InnocentHipster.LockView(30);
  InnocentHipster.Animate(2, 2, eOnce, eBlock);
  cBullet.ChangeRoom(-1);
  Wait(30);
  InnocentHipster.UnlockView();
  InnocentHipster.ChangeRoom(-1);
  Wait(30);
}
Mouse2.Visible = false;
Shooter.Visible = false;
cPrototype.LockView(6);
cPrototype.Think("Also, SHOOT mode doubles as LOOK - thanks to SSH's Description module (www.ags-ssh.blogspot.com) - and the information is displayed under the health bar");
Mouse2.SetPosition(450, 450);
Mouse1.SetPosition(450, 450);
Shooter.SetPosition(465, 490);
Wait(30);

// SWAP guns
cPrototype.Think("To SWAP between the heavy cannon and hand cannon, flip the scroll wheel either up or down");
Mouse5.Visible = true;
cPrototype.LockView(5);
cPrototype.Animate(1, 1, eOnce, eBlock);
cPrototype.LockView(4);
Wait(30);
Mouse5.Visible = false;
cPrototype.UnlockView();
cPrototype.LockView(31);
cPrototype.Animate(1, 5, eOnce, eBlock);
Wait(30);
cPrototype.LockView(32);
cPrototype.Animate(1, 5, eOnce, eBlock);
Wait(30);
cPrototype.UnlockView();

// Melee sword
cPrototype.ThinkView = 143;
cPrototype.Animate(1, 3, eOnce, eBlock);
cPrototype.Think("To melee attack with the Nadachi samurai sword, press SPACE BAR");
Wait(20);
cShot.on = true;
cPrototype.LockView(Random(4) + 144);
cPrototype.Animate(1, 1, eOnce, eBlock, eForwards);
cPrototype.Animate(1, 1, eOnce, eBlock, eBackwards);
Wait(20);
cPrototype.UnlockView();
cPrototype.ThinkView = 6;
Mouse3.Visible = true;
Mouse3.Visible = false;
Wait(30);

// Quad barrel shotgun
cPrototype.Think("To use the quad barrel shotgun and then for deploying the whirring blades of doom known as the Mantis Caltrop, press ENTER");
cPrototype.LockView(9);
cPrototype.Animate(1, 2, eOnce, eBlock);
Wait(10);
cShot.on = true;
cShot.ChangeRoom(player.Room, player.x, player.y+10);
cShot.Move(player.x - 1500, player.y+10, eNoBlock, eAnywhere);
cPrototype.Animate(7, 10, eOnce, eBlock);
cPrototype.Animate(6, 10, eOnce, eBlock);
cPrototype.Move(player.x + 15, player.y, eBlock, eWalkableAreas);
Wait(10);
cPrototype.UnlockView();
Mouse3.Visible = true;
Mouse3.Visible = false;
Wait(30);

// Chicken
Mouse1.Visible = true;
cPrototype.Think("To deploy the zombie-attracting chicken, press SHIFT");
Mouse1.Visible = false;
Mouse2.Visible = true;
Mouse2.Move(400, 450, 3, eNoBlock, eAnywhere);
Shooter.SetPosition(465, 550);
Shooter.Visible = true;
Shooter.Move(320, 550, 3, eBlock, eAnywhere);
cPrototype.LockView(136);
cPrototype.Animate(1, 2, eOnce, eBlock);
Chicken.ChangeRoom(player.Room, player.x-15, player.y);
Chicken.Walk(320, 550, eBlock, eAnywhere);
Mouse2.Visible = false;
Shooter.Visible = false;
cPrototype.LockView(6);
Mouse2.SetPosition(450, 450);
Mouse1.SetPosition(450, 450);
Shooter.SetPosition(465, 490);
Wait(30);
Chicken.LockView(122);
Chicken.Animate(Chicken.Loop, 2, eOnce, eBlock);
Chicken.UnlockView();
Chicken.ChangeRoom(-1);
Wait(30);

// Frank
cPrototype.Think("Enable the second Co-op player (slow, but powerful FRANK) by scrolling the options button on the menu.  He's controlled via WASD on the keyboard.");
FrankHelp.SetPosition(280, 320);
FrankHelp.Visible = true;
Frank.ChangeRoom(1, 325, 540);
Frank.FaceCharacter(cPrototype);
if (Random(1) == 1)
{
  Zombie22.ChangeRoom(1, 440, 540);
  Zombie22.Walk(325, 550, eNoBlock);
  Wait(25);
  Frank.LockView(232);
  Frank.Animate(2, 4, eOnce, eBlock);
  Zombie22.LockView(202);
  Zombie22.Animate(1, 1, eOnce, eBlock, eForwards);
  Zombie22.LockView(203);
  Zombie22.Animate(1, 2, eOnce, eBlock, eForwards);
  Zombie22.UnlockView();
  Zombie22.ChangeRoom(-1);
}
else
{
  Zombie15.ChangeRoom(1, 440, 540);
  Zombie15.Walk(325, 550, eNoBlock);
  Wait(25);
  Frank.LockView(232);
  Frank.Animate(4, 4, eOnce, eBlock);
  Zombie15.LockView(161);
  Zombie15.Animate(1, 1, eOnce, eBlock, eForwards);
  Zombie15.LockView(163);
  Zombie15.Animate(1, 2, eOnce, eBlock, eForwards);
  Zombie15.UnlockView();
  Zombie15.ChangeRoom(-1);
}
Frank.LockView(109);
Frank.Animate(Random(1) + 2, 5, eOnce, eBlock, eForwards);
Wait(100);
Frank.UnlockView();
Frank.ChangeRoom(-1);
FrankHelp.Visible = false;
FrankHelp.SetPosition(502, 483);
Wait(30);

// Closing procedures
cPrototype.Think("Every weapon has its own strategic advantages and disadvantages, consider using the environment as part of your tactics(teleporter, passageways, etc...), position others as blockers when dodging the various zombie projectiles, consider that certain zombies are more vulnerable at certain times");
Wait(30);
cPrototype.Think("...And to save innocents simply bump into them, but don't shoot UNLESS they have turned or it will affect your score.");
InnocentDamsel.ChangeRoom(1, 325, 540);
InnocentDamsel.LockView(71);
InnocentDamsel.Walk(player.x, player.y, eBlock, eWalkableAreas);
Wait(10);
InnocentDamsel.Say("My Hero!");
InnocentDamsel.UnlockView();
InnocentDamsel.ChangeRoom(-1);
Wait(30);
Start.Visible = true;
Quit.Visible = true;
Help.Visible = true;
Music.Visible = true;
cPrototype.on = false;

// Quick help overlay
QuickhelpMain.Visible = true;
Wait(80);
QuickhelpMain.Visible = false;
}
if ((mouse.x < 510 && mouse.y >= 456 && mouse.y <= 515) && musictoggle == false && twoplayer == false)
{  
  Musicon.Visible = true;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
  // Hide button text
  TextStart.Visible = false;
  TextQuit.Visible = false;
  TextHelp.Visible = false;
  TextOption.Visible = true;
}
else if ((mouse.x < 510 && mouse.y >= 456 && mouse.y <= 515) && musictoggle == true && twoplayer == false)
{
  TextHelp.Visible = false;
  TextOption.Visible = true;
  Musicoff.Visible = true;
  Musicon.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
}
else if ((mouse.x < 510 && mouse.y >= 456 && mouse.y <= 515) && musictoggle == true && twoplayer == true)
{
  TextHelp.Visible = false;
  TextOption.Visible = true;
  Musicoff.Visible = false;
  Musicon.Visible = false;
  TwoOnMusicOff.Visible = true;
  TwoOnMusicOn.Visible = false;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
}
else if ((mouse.x < 510 && mouse.y >= 456 && mouse.y <= 515) && musictoggle == false && twoplayer == true)
{
  TextHelp.Visible = false;
  TextOption.Visible = true;
  Musicoff.Visible = false;
  Musicon.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = true;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Entername.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
}

if ((mouse.x < 510 && mouse.y >= 456 && mouse.y <= 515) && mouse.IsButtonDown(eMouseLeft) || mouse.IsButtonDown(eMouseRight))
{
  MusicPush.Visible = true;
  Music.Visible = false;
  Wait(20);
  Music.Visible = true;
  MusicPush.Visible = false;
  if (musictoggle == true && twoplayer == false)
  {
    musictoggle = false;
    twoplayer = false;
    aServitor_menu.Play(eAudioPriorityVeryLow);
  }
  else if (musictoggle == false && twoplayer == false)
  {
    musictoggle = false;
    twoplayer = true;
    // aServitor_menu.Play(eAudioPriorityVeryLow);
  }
  else if (musictoggle == false && twoplayer == true)
  {
    musictoggle = true;
    twoplayer = true;
    aServitor_menu.Stop();
  }
  else if (musictoggle == true && twoplayer == true)
  {
    musictoggle = true;
    twoplayer = false;
    aServitor_menu.Stop();
  }
  // Music on
}
if (mouse.y >= 650) // enter name
{
  Namebox.Visible = true;
  Entername.Visible = true;
  Startgame.Visible = false;
  Quitgame.Visible = false;
  Gamehelp.Visible = false;
  Goodgame.Visible = false;
  Musicon.Visible = false;
  Musicoff.Visible = false;
  TwoOnMusicOff.Visible = false;
  TwoOnMusicOn.Visible = false;
  Static1.Visible = false;
  Static2.Visible = false;
  Gameprep.Visible = false;
  BAScreen.Visible = false;
  Tough.Visible = false;
  txtname.Enabled = true;
  DateTime *dt = DateTime.Now;
  if (dt.Month == 1 && dt.DayOfMonth == 1){playername = "HAPYNY"; ScoreTitle.Text = "New Year!"; } // New Year
  else if (dt.Month == 2 && dt.DayOfMonth == 15){playername = "VALENT"; ScoreTitle.Text = "Valentines!";} // Valentines
  else if (dt.Month == 2 && dt.DayOfMonth == 16){playername = "HAPCNY"; ScoreTitle.Text = "CNY!";} // Chinese New Year (Roughly)
  else if (dt.Month == 4 && dt.DayOfMonth == 1){playername = "APRFOO"; ScoreTitle.Text = "April Fools!";} // April Fools
  else if (dt.Month == 5 && dt.DayOfMonth == 16){playername = "JPBDAY"; ScoreTitle.Text = "JP Day!";} // Bday
  else if (dt.Month == 10 && dt.DayOfMonth == 31){playername = "HALLWN"; ScoreTitle.Text = "Halloween!";} // Halloween
  else if (dt.Month == 11 && dt.DayOfMonth == 11){playername = "VETERN";} // Veterans Day
  else if (dt.Month == 12 && dt.DayOfMonth == 25){playername = ":)XMAS"; ScoreTitle.Text = "Christmas!";} // Christmas
  else 
  {
    playername = txtname.Text;
    playername = playername.Append("      ");
    playername = playername.Substring(0, 6); // truncate name
  }
 }
else
{
  // txtname.Enabled = false;
}
}